// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package users is a generated GoMock package.
package users

import (
	user "goLang/pkg/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorage) Create(user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), user)
}

// FindUsersEmail mocks base method.
func (m *MockStorage) FindUsersEmail(email string) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersEmail", email)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersEmail indicates an expected call of FindUsersEmail.
func (mr *MockStorageMockRecorder) FindUsersEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersEmail", reflect.TypeOf((*MockStorage)(nil).FindUsersEmail), email)
}

// FindUsersNameEmail mocks base method.
func (m *MockStorage) FindUsersNameEmail(name, email string) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersNameEmail", name, email)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersNameEmail indicates an expected call of FindUsersNameEmail.
func (mr *MockStorageMockRecorder) FindUsersNameEmail(name, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersNameEmail", reflect.TypeOf((*MockStorage)(nil).FindUsersNameEmail), name, email)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(id int) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), id)
}
